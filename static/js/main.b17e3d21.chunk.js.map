{"version":3,"sources":["components/SyngleColor.js","App.js","reportWebVitals.js","index.js"],"names":["SyngleColor","rgb","weight","index","hexColor","useState","alert","setAlert","bcg","join","hexValue","useEffect","_","timeOut","window","setTimeout","clearTimeout","className","style","backgroundColor","onClick","navigator","clipboard","writeText","App","color","setColor","erroe","setError","Values","all","list","setList","onSubmit","e","preventDefault","colors","error","type","value","placeholder","onChange","target","map","hex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRA+BeA,MA5Bf,YAAsD,IAAhCC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAAW,EAEvBC,oBAAS,GAFc,mBAE1CC,EAF0C,KAEnCC,EAFmC,KAG3CC,EAAMP,EAAIQ,KAAK,KACfC,EAAQ,UAAMN,GASpB,OAPAO,qBAAU,SAAAC,GACN,IAAMC,EAAUC,OAAOC,YAAW,SAAAH,GAC9BL,GAAS,KACV,KACH,OAAO,SAAAK,GAAC,OAAII,aAAaH,MAC1B,CAACP,IAGA,0BAASW,UAAS,gBAAWd,EAAQ,IAAM,eACvCe,MAAO,CAACC,gBAAgB,OAAD,OAASX,EAAT,MACvBY,QAAS,SAAAR,GACLL,GAAS,GACTc,UAAUC,UAAUC,UAApB,WAAkCb,KAJ1C,UAOA,oBAAGO,UAAU,gBAAb,UAA8Bf,EAA9B,OACA,oBAAGe,UAAU,cAAb,cAA6BP,KAC5BJ,GAAS,mBAAGW,UAAU,QAAb,qC,MCiBHO,MAtCf,WAAgB,IAAD,EAEanB,mBAAS,IAFtB,mBAENoB,EAFM,KAECC,EAFD,OAGarB,oBAAS,GAHtB,mBAGNsB,EAHM,KAGCC,EAHD,OAIWvB,mBAAS,IAAIwB,IAAO,WAAWC,IAAI,KAJ9C,mBAINC,EAJM,KAIAC,EAJA,KAgBb,OACE,0BAASf,UAAU,MAAnB,UACE,sBAAKA,UAAU,YAAf,UACE,iDACA,uBAAMgB,SAdS,SAAAC,GACnBA,EAAEC,iBACF,IACE,IAAIC,EAAS,IAAIP,IAAOJ,GAAOK,IAAI,IACnCE,EAAQI,GACR,MAAOC,GACPT,GAAS,KAQP,UACE,uBAAOU,KAAK,OAAOC,MAAOd,EAAOe,YAAY,UAC3CC,SAAU,SAAAP,GAAC,OAAIR,EAASQ,EAAEQ,OAAOH,QACjCtB,UAAWU,EAAQ,QAAU,KAE/B,uBAAOW,KAAK,SAASC,MAAM,mBAG/B,qBAAKtB,UAAU,SAAf,SACEc,EAAKY,KAAI,SAAClB,EAAOtB,GACf,OAAO,cAAC,EAAD,2BAA6BsB,GAA7B,IAAoCtB,MAAOA,EAChDC,SAAUqB,EAAMmB,MADOzC,YCvBpB0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b17e3d21.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\nimport './style.css';\n\nfunction SyngleColor({rgb, weight, index, hexColor}) {\n\n    const [alert, setAlert] = useState(false);\n    const bcg = rgb.join(',');\n    const hexValue = `${hexColor}`;\n\n    useEffect(_ => {\n        const timeOut = window.setTimeout(_ => {\n            setAlert(false);\n        }, 3000);\n        return _ => clearTimeout(timeOut);\n    }, [alert]);\n\n    return (\n        <article className={`color ${index > 10 && 'color-light'}`}\n            style={{backgroundColor: `rgb(${bcg})`}}\n            onClick={_ => {\n                setAlert(true);\n                navigator.clipboard.writeText(`#${hexValue}`);\n            }}\n        >\n        <p className='percent-value'>{weight}%</p>\n        <p className='color-value'>#{hexValue}</p>\n        {alert && <p className='alert'>copied to clipboard</p>}\n        </article>\n    );\n}\n\nexport default SyngleColor;","import {useState} from 'react';\nimport Values from 'values.js';\nimport SyngleColor from './components/SyngleColor';\nimport './App.css';\n\nfunction App() {\n\n  const [color, setColor] = useState('');\n  const [erroe, setError] = useState(false);\n  const [list, setList] = useState(new Values('#f15025').all(10));\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    try {\n      let colors = new Values(color).all(10);\n      setList(colors)\n    } catch (error) {\n      setError(true);\n    }\n  }\n\n  return (\n    <section className=\"App\">\n      <div className='container'>\n        <h3>Color Generator</h3>\n        <form onSubmit={handleSubmit}>\n          <input type='text' value={color} placeholder='#f15025'\n            onChange={e => setColor(e.target.value)}\n            className={erroe ? 'error' : ''}\n          />\n          <input type='submit' value='Generate' />\n        </form>\n      </div>\n      <div className='colors'>{\n        list.map((color, index) => {\n          return <SyngleColor key={index} {...color} index={index}\n            hexColor={color.hex} />\n        })\n      }</div>\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}